name: Custom Workflow - Release Management

on:
  push:
    branches: [ main, master ]
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Release type'
        required: true
        default: 'patch'
        type: choice
        options:
          - major
          - minor
          - patch

permissions:
  contents: write
  pull-requests: write

jobs:
  generate-release-notes:
    name: Generate Release Notes
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18.x'
    
    - name: Get version
      id: version
      run: |
        if [ "${{ github.event_name }}" == "push" ]; then
          VERSION=${GITHUB_REF#refs/tags/v}
        else
          VERSION=$(node -p "require('./package.json').version")
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Current version: $VERSION"
    
    - name: Generate changelog
      run: |
        echo "📝 Generating release notes..."
        LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
        
        if [ -z "$LATEST_TAG" ]; then
          COMMITS=$(git log --pretty=format:"- %s (%h)" --no-merges)
        else
          COMMITS=$(git log ${LATEST_TAG}..HEAD --pretty=format:"- %s (%h)" --no-merges)
        fi
        
        echo "## Release v${{ steps.version.outputs.version }}" > release-notes.md
        echo "" >> release-notes.md
        echo "### Changes" >> release-notes.md
        echo "$COMMITS" >> release-notes.md
        cat release-notes.md
    
    - name: Upload release notes
      uses: actions/upload-artifact@v4
      with:
        name: release-notes
        path: release-notes.md
        retention-days: 30

  performance-metrics:
    name: Analyze Performance Metrics
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18.x'
    
    - name: Install dependencies
      run: npm install
    
    - name: Analyze code metrics
      run: |
        echo "📊 Analyzing code metrics..."
        LOC=$(find src -name "*.js" -exec wc -l {} + 2>/dev/null | tail -1 | awk '{print $1}' || echo "0")
        FILES=$(find src -name "*.js" 2>/dev/null | wc -l || echo "0")
        
        cat > metrics-report.json << EOF
        {
          "lines_of_code": ${LOC},
          "file_count": ${FILES},
          "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)"
        }
        EOF
        
        cat metrics-report.json
    
    - name: Upload metrics
      uses: actions/upload-artifact@v4
      with:
        name: performance-metrics
        path: metrics-report.json
        retention-days: 90

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [generate-release-notes, performance-metrics]
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Download release notes
      uses: actions/download-artifact@v4
      with:
        name: release-notes
    
    - name: Download metrics
      uses: actions/download-artifact@v4
      with:
        name: performance-metrics
    
    - name: Create release package
      run: |
        echo "📦 Creating release package..."
        mkdir -p release
        cp -r src public run.js package*.json release/ 2>/dev/null || true
        tar -czf heavens-above-${{ needs.generate-release-notes.outputs.version }}.tar.gz release/
        zip -r heavens-above-${{ needs.generate-release-notes.outputs.version }}.zip release/ 2>/dev/null || true
    
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        body_path: release-notes.md
        files: |
          heavens-above-${{ needs.generate-release-notes.outputs.version }}.tar.gz
          heavens-above-${{ needs.generate-release-notes.outputs.version }}.zip
          metrics-report.json
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  notify-release:
    name: Release Summary
    runs-on: ubuntu-latest
    needs: [create-release]
    if: always()
    
    steps:
    - name: Generate summary
      run: |
        echo "📊 Release Summary"
        echo "=================="
        echo "Release: v${{ needs.generate-release-notes.outputs.version }}"
        echo "Status: ${{ needs.create-release.result }}"
        echo "✅ Release process completed"
