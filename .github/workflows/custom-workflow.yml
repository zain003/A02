name: Custom Workflow - Release Management

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Release type'
        required: true
        default: 'patch'
        type: choice
        options:
          - major
          - minor
          - patch
      generate_changelog:
        description: 'Generate changelog'
        required: false
        type: boolean
        default: true

permissions:
  contents: write
  pull-requests: write
  issues: write

jobs:
  generate-release-notes:
    name: Generate Release Notes
    runs-on: ubuntu-latest
    outputs:
      release_notes: ${{ steps.notes.outputs.notes }}
      version: ${{ steps.version.outputs.version }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18.x'
    
    - name: Get version
      id: version
      run: |
        if [ "${{ github.event_name }}" == "push" ]; then
          VERSION=${GITHUB_REF#refs/tags/v}
        else
          VERSION=$(node -p "require('./package.json').version")
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Current version: $VERSION"
    
    - name: Generate changelog
      id: notes
      run: |
        echo "📝 Generating release notes..."
        
        # Get the latest tag
        LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
        
        if [ -z "$LATEST_TAG" ]; then
          echo "No previous tags found, generating full changelog"
          COMMITS=$(git log --pretty=format:"- %s (%h)" --no-merges)
        else
          echo "Generating changelog since $LATEST_TAG"
          COMMITS=$(git log ${LATEST_TAG}..HEAD --pretty=format:"- %s (%h)" --no-merges)
        fi
        
        # Categorize commits
        FEATURES=$(echo "$COMMITS" | grep -i "feat:" || echo "")
        FIXES=$(echo "$COMMITS" | grep -i "fix:" || echo "")
        CHORES=$(echo "$COMMITS" | grep -i "chore:" || echo "")
        
        # Create release notes
        NOTES="## Release v${{ steps.version.outputs.version }}\n\n"
        
        if [ ! -z "$FEATURES" ]; then
          NOTES="${NOTES}### ✨ Features\n${FEATURES}\n\n"
        fi
        
        if [ ! -z "$FIXES" ]; then
          NOTES="${NOTES}### 🐛 Bug Fixes\n${FIXES}\n\n"
        fi
        
        if [ ! -z "$CHORES" ]; then
          NOTES="${NOTES}### 🔧 Maintenance\n${CHORES}\n\n"
        fi
        
        echo "$NOTES" > release-notes.md
        cat release-notes.md
        
        echo "notes<<EOF" >> $GITHUB_OUTPUT
        cat release-notes.md >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
    
    - name: Upload release notes
      uses: actions/upload-artifact@v4
      with:
        name: release-notes
        path: release-notes.md
        retention-days: 30

  performance-metrics:
    name: Analyze Performance Metrics
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18.x'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Measure execution time
      run: |
        echo "⏱️ Measuring application performance..."
        START_TIME=$(date +%s)
        timeout 60 node run.js || true
        END_TIME=$(date +%s)
        DURATION=$((END_TIME - START_TIME))
        
        echo "Execution time: ${DURATION}s"
        echo "EXECUTION_TIME=${DURATION}" >> $GITHUB_ENV
    
    - name: Analyze code metrics
      run: |
        echo "📊 Analyzing code metrics..."
        
        # Count lines of code
        LOC=$(find src -name "*.js" -exec wc -l {} + | tail -1 | awk '{print $1}')
        echo "Lines of code: $LOC"
        
        # Count files
        FILES=$(find src -name "*.js" | wc -l)
        echo "JavaScript files: $FILES"
        
        # Create metrics report
        cat > metrics-report.json << EOF
        {
          "execution_time": ${EXECUTION_TIME},
          "lines_of_code": ${LOC},
          "file_count": ${FILES},
          "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)"
        }
        EOF
        
        cat metrics-report.json
    
    - name: Upload metrics
      uses: actions/upload-artifact@v4
      with:
        name: performance-metrics
        path: metrics-report.json
        retention-days: 90

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [generate-release-notes, performance-metrics]
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Download release notes
      uses: actions/download-artifact@v4
      with:
        name: release-notes
    
    - name: Download metrics
      uses: actions/download-artifact@v4
      with:
        name: performance-metrics
    
    - name: Create release package
      run: |
        echo "📦 Creating release package..."
        mkdir -p release
        cp -r src public run.js package*.json release/
        tar -czf heavens-above-${{ needs.generate-release-notes.outputs.version }}.tar.gz release/
        zip -r heavens-above-${{ needs.generate-release-notes.outputs.version }}.zip release/
    
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        body_path: release-notes.md
        files: |
          heavens-above-${{ needs.generate-release-notes.outputs.version }}.tar.gz
          heavens-above-${{ needs.generate-release-notes.outputs.version }}.zip
          metrics-report.json
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  sync-data:
    name: Sync Data Between Systems
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18.x'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Fetch latest data
      run: |
        echo "🔄 Fetching latest satellite data..."
        node run.js
      timeout-minutes: 10
    
    - name: Sync to external systems
      run: |
        echo "☁️ Syncing data to external systems..."
        
        # Example: Sync to cloud storage
        # aws s3 sync public/data/ s3://your-bucket/data/
        
        # Example: Sync to database
        # node scripts/sync-to-database.js
        
        # Example: Sync to API
        # curl -X POST https://api.example.com/sync -d @public/data/satellites.json
        
        echo "✅ Data sync completed"

  notify-release:
    name: Release Summary
    runs-on: ubuntu-latest
    needs: [create-release]
    if: always()
    
    steps:
    - name: Generate summary
      run: |
        echo "📊 Release Summary"
        echo "=================="
        echo "Release: v${{ needs.generate-release-notes.outputs.version }}"
        echo "Status: ${{ needs.create-release.result }}"
        echo "✅ Release process completed"
