name: Deployment Pipeline

on:
  push:
    branches: [ main, master ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - preview

env:
  NODE_VERSION: '18.x'
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

jobs:
  build:
    name: Build Application
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run application
      run: node run.js
      timeout-minutes: 5
      continue-on-error: true
    
    - name: Create build artifact
      run: |
        mkdir -p build
        cp -r src public run.js package*.json build/
        tar -czf heavens-above-build.tar.gz build/
    
    - name: Upload build artifact
      uses: actions/upload-artifact@v4
      with:
        name: build-artifact
        path: heavens-above-build.tar.gz
        retention-days: 7

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: build
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Verify syntax
      run: node -c run.js
    
    - name: Check package integrity
      run: npm ls --depth=0

  deploy-preview:
    name: Deploy to Vercel Preview
    runs-on: ubuntu-latest
    needs: [build, test]
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'preview'
    environment:
      name: preview
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Install Vercel CLI
      run: npm install --global vercel@latest
    
    - name: Pull Vercel Environment Information
      run: vercel pull --yes --environment=preview --token=${{ secrets.VERCEL_TOKEN }}
    
    - name: Build Project Artifacts
      run: vercel build --token=${{ secrets.VERCEL_TOKEN }}
    
    - name: Deploy to Vercel Preview
      id: deploy
      run: |
        DEPLOYMENT_URL=$(vercel deploy --prebuilt --token=${{ secrets.VERCEL_TOKEN }})
        echo "url=$DEPLOYMENT_URL" >> $GITHUB_OUTPUT
        echo "âœ… Deployed to: $DEPLOYMENT_URL"
    
    - name: Comment PR with preview URL
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: 'ðŸš€ Preview deployment ready!\n\n**URL:** ${{ steps.deploy.outputs.url }}'
          })

  deploy-production:
    name: Deploy to Vercel Production
    runs-on: ubuntu-latest
    needs: [build, test]
    if: github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production')
    environment:
      name: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Install Vercel CLI
      run: npm install --global vercel@latest
    
    - name: Pull Vercel Environment Information
      run: vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}
    
    - name: Build Project Artifacts
      run: vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}
    
    - name: Deploy to Vercel Production
      id: deploy
      run: |
        DEPLOYMENT_URL=$(vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }})
        echo "url=$DEPLOYMENT_URL" >> $GITHUB_OUTPUT
        echo "âœ… Deployed to production: $DEPLOYMENT_URL"
    
    - name: Create deployment log
      run: |
        echo "Deployment Summary" > deployment-log.txt
        echo "==================" >> deployment-log.txt
        echo "Environment: production" >> deployment-log.txt
        echo "URL: ${{ steps.deploy.outputs.url }}" >> deployment-log.txt
        echo "Commit: ${{ github.sha }}" >> deployment-log.txt
        echo "Deployed by: ${{ github.actor }}" >> deployment-log.txt
        echo "Timestamp: $(date)" >> deployment-log.txt
        cat deployment-log.txt
    
    - name: Upload deployment log
      uses: actions/upload-artifact@v4
      with:
        name: deployment-log
        path: deployment-log.txt
        retention-days: 30
